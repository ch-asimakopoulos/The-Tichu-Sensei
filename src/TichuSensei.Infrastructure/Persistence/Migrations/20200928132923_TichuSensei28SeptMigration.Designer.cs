// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TichuSensei.Infrastructure.Persistence;

namespace TichuSensei.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200928132923_TichuSensei28SeptMigration")]
    partial class TichuSensei28SeptMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnName("user_code")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("client_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("creation_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnName("device_code")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnName("expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode")
                        .HasName("pk_device_codes");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasName("ix_device_codes_device_code");

                    b.HasIndex("Expiration")
                        .HasName("ix_device_codes_expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("client_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("creation_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnName("expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key")
                        .HasName("pk_persisted_grants");

                    b.HasIndex("Expiration")
                        .HasName("ix_persisted_grants_expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type")
                        .HasName("ix_persisted_grants_subject_id_client_id_type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_user_claims_user_id");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_user_logins_user_id");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_user_roles_role_id");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.Call", b =>
                {
                    b.Property<string>("CallId")
                        .HasColumnName("call_id")
                        .HasColumnType("text");

                    b.Property<int>("CallType")
                        .HasColumnName("call_type")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("text");

                    b.Property<string>("RoundId")
                        .HasColumnName("round_id")
                        .HasColumnType("text");

                    b.Property<bool?>("Success")
                        .HasColumnName("success")
                        .HasColumnType("boolean");

                    b.Property<string>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("text");

                    b.HasKey("CallId")
                        .HasName("pk_calls");

                    b.HasIndex("RoundId")
                        .HasName("ix_calls_round_id");

                    b.ToTable("calls");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.Game", b =>
                {
                    b.Property<string>("GameId")
                        .HasColumnName("game_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEnded")
                        .HasColumnName("date_ended")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("GameOver")
                        .HasColumnName("game_over")
                        .HasColumnType("boolean");

                    b.Property<bool>("MercyRule")
                        .HasColumnName("mercy_rule")
                        .HasColumnType("boolean");

                    b.Property<string>("PlayerFourId")
                        .HasColumnName("player_four_id")
                        .HasColumnType("text");

                    b.Property<string>("PlayerOneId")
                        .HasColumnName("player_one_id")
                        .HasColumnType("text");

                    b.Property<string>("PlayerThreeId")
                        .HasColumnName("player_three_id")
                        .HasColumnType("text");

                    b.Property<string>("PlayerTwoId")
                        .HasColumnName("player_two_id")
                        .HasColumnType("text");

                    b.Property<string>("TeamOneId")
                        .HasColumnName("team_one_id")
                        .HasColumnType("text");

                    b.Property<string>("TeamTwoId")
                        .HasColumnName("team_two_id")
                        .HasColumnType("text");

                    b.HasKey("GameId")
                        .HasName("pk_games");

                    b.HasIndex("PlayerFourId")
                        .HasName("ix_games_player_four_id");

                    b.HasIndex("PlayerOneId")
                        .HasName("ix_games_player_one_id");

                    b.HasIndex("PlayerThreeId")
                        .HasName("ix_games_player_three_id");

                    b.HasIndex("PlayerTwoId")
                        .HasName("ix_games_player_two_id");

                    b.HasIndex("TeamOneId")
                        .HasName("ix_games_team_one_id");

                    b.HasIndex("TeamTwoId")
                        .HasName("ix_games_team_two_id");

                    b.ToTable("games");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.GameStats", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<int>("BombsTotalTeamOne")
                        .HasColumnName("bombs_total_team_one")
                        .HasColumnType("integer");

                    b.Property<int>("BombsTotalTeamTwo")
                        .HasColumnName("bombs_total_team_two")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnName("game_id")
                        .HasColumnType("integer");

                    b.Property<string>("GameId1")
                        .HasColumnName("game_id1")
                        .HasColumnType("text");

                    b.Property<int>("GrandTichuCallsTotalTeamOne")
                        .HasColumnName("grand_tichu_calls_total_team_one")
                        .HasColumnType("integer");

                    b.Property<int>("GrandTichuCallsTotalTeamTwo")
                        .HasColumnName("grand_tichu_calls_total_team_two")
                        .HasColumnType("integer");

                    b.Property<int>("GrandTichuCallsWonTeamOne")
                        .HasColumnName("grand_tichu_calls_won_team_one")
                        .HasColumnType("integer");

                    b.Property<int>("GrandTichuCallsWonTeamTwo")
                        .HasColumnName("grand_tichu_calls_won_team_two")
                        .HasColumnType("integer");

                    b.Property<int>("HighCardsTotalTeamOne")
                        .HasColumnName("high_cards_total_team_one")
                        .HasColumnType("integer");

                    b.Property<int>("HighCardsTotalTeamTwo")
                        .HasColumnName("high_cards_total_team_two")
                        .HasColumnType("integer");

                    b.Property<int>("RoundsTotal")
                        .HasColumnName("rounds_total")
                        .HasColumnType("integer");

                    b.Property<int>("RoundsWonTeamOne")
                        .HasColumnName("rounds_won_team_one")
                        .HasColumnType("integer");

                    b.Property<int>("RoundsWonTeamTwo")
                        .HasColumnName("rounds_won_team_two")
                        .HasColumnType("integer");

                    b.Property<int>("TichuCallsTotalTeamOne")
                        .HasColumnName("tichu_calls_total_team_one")
                        .HasColumnType("integer");

                    b.Property<int>("TichuCallsTotalTeamTwo")
                        .HasColumnName("tichu_calls_total_team_two")
                        .HasColumnType("integer");

                    b.Property<int>("TichuCallsWonTeamOne")
                        .HasColumnName("tichu_calls_won_team_one")
                        .HasColumnType("integer");

                    b.Property<int>("TichuCallsWonTeamTwo")
                        .HasColumnName("tichu_calls_won_team_two")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_game_stats");

                    b.HasIndex("GameId1")
                        .HasName("ix_game_stats_game_id1");

                    b.ToTable("game_stats");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.Player", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("text");

                    b.Property<string>("AvatarPath")
                        .HasColumnName("avatar_path")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("PlayerId")
                        .HasName("pk_players");

                    b.ToTable("players");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.PlayerStats", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<int>("BombsTotal")
                        .HasColumnName("bombs_total")
                        .HasColumnType("integer");

                    b.Property<int>("EloRating")
                        .HasColumnName("elo_rating")
                        .HasColumnType("integer");

                    b.Property<int>("GamesTotal")
                        .HasColumnName("games_total")
                        .HasColumnType("integer");

                    b.Property<int>("GamesWon")
                        .HasColumnName("games_won")
                        .HasColumnType("integer");

                    b.Property<int>("GrandTichuCallsTotal")
                        .HasColumnName("grand_tichu_calls_total")
                        .HasColumnType("integer");

                    b.Property<int>("GrandTichuCallsWon")
                        .HasColumnName("grand_tichu_calls_won")
                        .HasColumnType("integer");

                    b.Property<int>("HighCardsTotal")
                        .HasColumnName("high_cards_total")
                        .HasColumnType("integer");

                    b.Property<int>("OpponentsBombsTotal")
                        .HasColumnName("opponents_bombs_total")
                        .HasColumnType("integer");

                    b.Property<int>("OpponentsHighCardsTotal")
                        .HasColumnName("opponents_high_cards_total")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("text");

                    b.Property<int>("PointsWon")
                        .HasColumnName("points_won")
                        .HasColumnType("integer");

                    b.Property<int>("RoundsDrawn")
                        .HasColumnName("rounds_drawn")
                        .HasColumnType("integer");

                    b.Property<int>("RoundsTotal")
                        .HasColumnName("rounds_total")
                        .HasColumnType("integer");

                    b.Property<int>("RoundsWon")
                        .HasColumnName("rounds_won")
                        .HasColumnType("integer");

                    b.Property<int>("TichuCallsTotal")
                        .HasColumnName("tichu_calls_total")
                        .HasColumnType("integer");

                    b.Property<int>("TichuCallsWon")
                        .HasColumnName("tichu_calls_won")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_player_stats");

                    b.HasIndex("PlayerId")
                        .IsUnique()
                        .HasName("ix_player_stats_player_id");

                    b.ToTable("player_stats");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.Round", b =>
                {
                    b.Property<string>("RoundId")
                        .HasColumnName("round_id")
                        .HasColumnType("text");

                    b.Property<int>("BombsTeamOne")
                        .HasColumnName("bombs_team_one")
                        .HasColumnType("integer");

                    b.Property<int>("BombsTeamTwo")
                        .HasColumnName("bombs_team_two")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEnded")
                        .HasColumnName("date_ended")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GameStatsId")
                        .HasColumnName("game_stats_id")
                        .HasColumnType("text");

                    b.Property<int>("HighCardsTeamOne")
                        .HasColumnName("high_cards_team_one")
                        .HasColumnType("integer");

                    b.Property<int>("HighCardsTeamTwo")
                        .HasColumnName("high_cards_team_two")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerFourId")
                        .HasColumnName("player_four_id")
                        .HasColumnType("text");

                    b.Property<string>("PlayerOneId")
                        .HasColumnName("player_one_id")
                        .HasColumnType("text");

                    b.Property<string>("PlayerThreeId")
                        .HasColumnName("player_three_id")
                        .HasColumnType("text");

                    b.Property<string>("PlayerTwoId")
                        .HasColumnName("player_two_id")
                        .HasColumnType("text");

                    b.Property<int>("ScoreTeamOne")
                        .HasColumnName("score_team_one")
                        .HasColumnType("integer");

                    b.Property<int>("ScoreTeamTwo")
                        .HasColumnName("score_team_two")
                        .HasColumnType("integer");

                    b.Property<string>("TeamOneId")
                        .HasColumnName("team_one_id")
                        .HasColumnType("text");

                    b.Property<string>("TeamTwoId")
                        .HasColumnName("team_two_id")
                        .HasColumnType("text");

                    b.HasKey("RoundId")
                        .HasName("pk_rounds");

                    b.HasIndex("GameStatsId")
                        .HasName("ix_rounds_game_stats_id");

                    b.HasIndex("PlayerFourId")
                        .HasName("ix_rounds_player_four_id");

                    b.HasIndex("PlayerOneId")
                        .HasName("ix_rounds_player_one_id");

                    b.HasIndex("PlayerThreeId")
                        .HasName("ix_rounds_player_three_id");

                    b.HasIndex("PlayerTwoId")
                        .HasName("ix_rounds_player_two_id");

                    b.HasIndex("TeamOneId")
                        .HasName("ix_rounds_team_one_id");

                    b.HasIndex("TeamTwoId")
                        .HasName("ix_rounds_team_two_id");

                    b.ToTable("rounds");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.Team", b =>
                {
                    b.Property<string>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("PlayerOneId")
                        .HasColumnName("player_one_id")
                        .HasColumnType("text");

                    b.Property<string>("PlayerTwoId")
                        .HasColumnName("player_two_id")
                        .HasColumnType("text");

                    b.HasKey("TeamId")
                        .HasName("pk_teams");

                    b.HasIndex("PlayerOneId")
                        .HasName("ix_teams_player_one_id");

                    b.HasIndex("PlayerTwoId")
                        .HasName("ix_teams_player_two_id");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.TeamStats", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<int>("BombsTotal")
                        .HasColumnName("bombs_total")
                        .HasColumnType("integer");

                    b.Property<int>("EloRating")
                        .HasColumnName("elo_rating")
                        .HasColumnType("integer");

                    b.Property<int>("GamesTotal")
                        .HasColumnName("games_total")
                        .HasColumnType("integer");

                    b.Property<int>("GamesWon")
                        .HasColumnName("games_won")
                        .HasColumnType("integer");

                    b.Property<int>("GrandTichuCallsTotal")
                        .HasColumnName("grand_tichu_calls_total")
                        .HasColumnType("integer");

                    b.Property<int>("GrandTichuCallsWon")
                        .HasColumnName("grand_tichu_calls_won")
                        .HasColumnType("integer");

                    b.Property<int>("HighCardsTotal")
                        .HasColumnName("high_cards_total")
                        .HasColumnType("integer");

                    b.Property<int>("OpponentsBombsTotal")
                        .HasColumnName("opponents_bombs_total")
                        .HasColumnType("integer");

                    b.Property<int>("OpponentsHighCardsTotal")
                        .HasColumnName("opponents_high_cards_total")
                        .HasColumnType("integer");

                    b.Property<int>("PointsWon")
                        .HasColumnName("points_won")
                        .HasColumnType("integer");

                    b.Property<int>("RoundsDrawn")
                        .HasColumnName("rounds_drawn")
                        .HasColumnType("integer");

                    b.Property<int>("RoundsTotal")
                        .HasColumnName("rounds_total")
                        .HasColumnType("integer");

                    b.Property<int>("RoundsWon")
                        .HasColumnName("rounds_won")
                        .HasColumnType("integer");

                    b.Property<string>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("text");

                    b.Property<int>("TichuCallsTotal")
                        .HasColumnName("tichu_calls_total")
                        .HasColumnType("integer");

                    b.Property<int>("TichuCallsWon")
                        .HasColumnName("tichu_calls_won")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_team_stats");

                    b.HasIndex("TeamId")
                        .IsUnique()
                        .HasName("ix_team_stats_team_id");

                    b.ToTable("team_stats");
                });

            modelBuilder.Entity("TichuSensei.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_claims_asp_net_roles_identity_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TichuSensei.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claims_asp_net_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TichuSensei.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_logins_asp_net_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_asp_net_roles_identity_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TichuSensei.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_asp_net_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TichuSensei.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_tokens_asp_net_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.Call", b =>
                {
                    b.HasOne("TichuSensei.Core.Domain.Entities.Round", "Round")
                        .WithMany("Calls")
                        .HasForeignKey("RoundId")
                        .HasConstraintName("fk_calls_rounds_round_id");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.Game", b =>
                {
                    b.HasOne("TichuSensei.Core.Domain.Entities.Player", "PlayerFour")
                        .WithMany()
                        .HasForeignKey("PlayerFourId")
                        .HasConstraintName("fk_games_players_player_four_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Player", "PlayerOne")
                        .WithMany()
                        .HasForeignKey("PlayerOneId")
                        .HasConstraintName("fk_games_players_player_one_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Player", "PlayerThree")
                        .WithMany()
                        .HasForeignKey("PlayerThreeId")
                        .HasConstraintName("fk_games_players_player_three_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Player", "PlayerTwo")
                        .WithMany()
                        .HasForeignKey("PlayerTwoId")
                        .HasConstraintName("fk_games_players_player_two_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Team", "TeamOne")
                        .WithMany()
                        .HasForeignKey("TeamOneId")
                        .HasConstraintName("fk_games_teams_team_one_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Team", "TeamTwo")
                        .WithMany()
                        .HasForeignKey("TeamTwoId")
                        .HasConstraintName("fk_games_teams_team_two_id");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.GameStats", b =>
                {
                    b.HasOne("TichuSensei.Core.Domain.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId1")
                        .HasConstraintName("fk_game_stats_games_game_id1");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.PlayerStats", b =>
                {
                    b.HasOne("TichuSensei.Core.Domain.Entities.Player", "Player")
                        .WithOne("Stats")
                        .HasForeignKey("TichuSensei.Core.Domain.Entities.PlayerStats", "PlayerId")
                        .HasConstraintName("fk_player_stats_players_player_id");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.Round", b =>
                {
                    b.HasOne("TichuSensei.Core.Domain.Entities.GameStats", null)
                        .WithMany("Rounds")
                        .HasForeignKey("GameStatsId")
                        .HasConstraintName("fk_rounds_game_stats_game_stats_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Player", "PlayerFour")
                        .WithMany()
                        .HasForeignKey("PlayerFourId")
                        .HasConstraintName("fk_rounds_players_player_four_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Player", "PlayerOne")
                        .WithMany()
                        .HasForeignKey("PlayerOneId")
                        .HasConstraintName("fk_rounds_players_player_one_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Player", "PlayerThree")
                        .WithMany()
                        .HasForeignKey("PlayerThreeId")
                        .HasConstraintName("fk_rounds_players_player_three_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Player", "PlayerTwo")
                        .WithMany()
                        .HasForeignKey("PlayerTwoId")
                        .HasConstraintName("fk_rounds_players_player_two_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Team", "TeamOne")
                        .WithMany()
                        .HasForeignKey("TeamOneId")
                        .HasConstraintName("fk_rounds_teams_team_one_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Team", "TeamTwo")
                        .WithMany()
                        .HasForeignKey("TeamTwoId")
                        .HasConstraintName("fk_rounds_teams_team_two_id");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.Team", b =>
                {
                    b.HasOne("TichuSensei.Core.Domain.Entities.Player", "PlayerOne")
                        .WithMany()
                        .HasForeignKey("PlayerOneId")
                        .HasConstraintName("fk_teams_players_player_one_id");

                    b.HasOne("TichuSensei.Core.Domain.Entities.Player", "PlayerTwo")
                        .WithMany()
                        .HasForeignKey("PlayerTwoId")
                        .HasConstraintName("fk_teams_players_player_two_id");
                });

            modelBuilder.Entity("TichuSensei.Core.Domain.Entities.TeamStats", b =>
                {
                    b.HasOne("TichuSensei.Core.Domain.Entities.Team", "Team")
                        .WithOne("Stats")
                        .HasForeignKey("TichuSensei.Core.Domain.Entities.TeamStats", "TeamId")
                        .HasConstraintName("fk_team_stats_teams_team_id");
                });
#pragma warning restore 612, 618
        }
    }
}
